mkdir ~/tls_cert && cd ~/tls_cert 
(Root CA)
openssl genrsa -out rootCA.key 2048		--->create key for root ca	
openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem -config root.cnf

-------------------------------------------------------------------------------------
openssl req: Start a certificate request.

-x509: Create a self-signed certificate instead of a certificate request.

-new: Create a new certificate.

-nodes: Do not encrypt the private key.

-key rootCA.key: Use rootCA.key as the private key.

-sha256: Use SHA-256 as the hashing algorithm.

-days 1024: The certificate will be valid for 1024 days.

-out rootCA.pem: Output the certificate to a file named rootCA.pem.

-config : configration file for Root CA
--------------------------------------------------------------------------------------
(server)
openssl genrsa -out server.key 2048		---> create key for server 
openssl req -new -key server.key -out server.csr -config server.cnf	---> req CSR 
openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 500 -sha256 -extfile server.cnf -extensions v3_req

--------------
openssl x509: Work with X.509 certificates.

-req: The input is a certificate signing request (CSR).

-in server.csr: The CSR file to be signed.

-CA rootCA.pem: The CA certificate used to sign the CSR.

-CAkey rootCA.key: The CAâ€™s private key.

-CAcreateserial: Create a serial number file (if not already present).

-out server.crt: Output the signed certificate to this file.

-days 500: The signed certificate will be valid for 500 days.

-sha256: Use SHA-256 as the hashing algorithm.
------------------
(client)
openssl genrsa -out client.key 2048		---> create key for client 
openssl req -new -key client.key -out client.csr	---> req CSR 
openssl x509 -req -in client.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out client.crt -days 500 -sha256	